mean(rowMeans(df.responses[,index,with=FALSE]))
(7.12+7.26)/2
dim(df.responses)
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responses.csv",head=TRUE,sep=";", na.strings = c("","NA"),stringsAsFactors=FALSE)
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
as.factor)
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
colnames(df.responses)[1]   <- "subjects"
df.responses                <- Filter(function(x) !(all(x=="")), df.responses) #delete blank columns
#Split all item specific data from subject specific data
ind_items   <- grep("[VN]A[0-9]",colnames(df.responses),value = TRUE)
df.subjectinfo <- df.responses
df.subjectinfo[,ind_items] <- NULL
df.responses  <- df.responses[,c("subjects",ind_items),with=FALSE]
#reshape items
ind             <- grep("^[VN]A[0-9]*$",colnames(df.responses),value = TRUE)
df.respAttach   <- df.responses[,c("subjects",ind),with=FALSE]
df.respAttach   <- melt(df.respAttach,id="subjects",value.name="response_attachment",variable.name='items')
ind             <- grep("^[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respTime     <- df.responses[,c("subjects",ind),with=FALSE]
df.respTime     <- melt(df.respTime,id="subjects",value.name="rt_attachment",variable.name='items')
ind             <- grep("P[VN]A[0-9]*]$",colnames(df.responses),value = TRUE)
df.respPAttach  <- df.responses[,c("subjects",ind),with=FALSE]
df.respPAttach  <- melt(df.respPAttach,id="subjects",value.name="rating_plausibility",variable.name='items')
ind             <- grep("P[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respPTime    <- df.responses[,c("subjects",ind),with=FALSE]
df.respPTime    <- melt(df.respPTime,id="subjects",value.name="rt_plausibility",variable.name='items')
df.responses    <- cbind(df.respAttach,df.respTime[,3],df.respPAttach[,3],df.respPTime[,3])
df.responses$hits <- as.numeric((grepl("N",df.responses$items) & df.responses$response_attachment == "Nomen") |
(grepl("V",df.responses$items) & df.responses$response_attachment == "Verb"))
df.responses    <- df.responses %>%
mutate(attachment = ifelse(grepl("N",items),"Noun","Verb"))
#############ANALYSIS#################
summary(df.subjectinfo$age)
summary((df.subjectinfo$interviewtime)/60)
#find outlier (who did not pass the test?)
#number of wrong answers per participant x/4
df.subjectinfo %>%
select(subjects,starts_with("correct")) %>%
mutate(number_correct = rowSums(!is.na(.[,2:ncol(.)]))) %>%
select(subjects,number_correct)
#average accuracy of unambiguous items
subset_unambiguous <- stimuli$fullID[(stimuli$Unambiguous.==1)]
sentences_unambiguous <- stimuli[(stimuli$Unambiguous.==1),4:12]
df.responses %>%
filter(items %in% subset_unambiguous) %>%
group_by(subjects) %>%
summarise(accuracy = mean(hits))
#Biases: Reaction Times total and per attachment
summary_rts <- df.responses %>%
group_by(subjects,attachment,hits) %>%
summarise(mean_rt = mean(rt_attachment))
dim(df.responses)
length(df.responses$subjects)
levels(df.responses)
nlevels(df.responses$subjects)
str(df.responses)
levels(df.responses$subjects)
levels(is.factor(df.responses$subjects))
dim(responses)
responses
df.responses %>%
group_by(items) %>%
summarise(percent_correct = sum(hits))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = sum(hits)/12)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/12,digits=2))
f.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/12,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/12,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
mean_accuracy <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
d
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2))
mean_accuracy
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct >= mean_accuracy)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct < mean_accuracy)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= mean_accuracy)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2))
items_reject  <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= mean_accuracy)
dim(items_reject)
mean_accuracy
percent_correct
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct == 1)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct >= 0.8)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct >= 0.8)
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= 0.8)
mean_accuracy
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= mean_accuracy)
mean_accuracy[1]
typeof(mean_accuracy)
typeof(mean_accuracy[1])
typeof(mean_accuracy[1,1])
typeof(unlist(mean_accuracy))
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= unlist(mean_accuracy))
stimuli
stimuli$ID
stimuli$fullID
stimuli[(stimuli$fullID==items_reject),4:12]
stimuli[(stimuli$fullID=items_reject),4:12]
stimuli[(stimuli$fullID %in% items_reject),4:12]
stimuli$fullID %in% items_reject
stimuli$fullID
items_reject
items_reject  <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= unlist(mean_accuracy))
items_reject
items_reject$items
stimuli$fullID %in% items_reject$items
stimuli[(stimuli$fullID %in% items_reject$items),4:12]
stimuli
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
items_reject
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
rm(list=ls())
library(plotly)
library(reshape)
library(RColorBrewer)
library(data.table)
library(dplyr)
#Create color scheme
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responses.csv",head=TRUE,sep=";", na.strings = c("","NA"),stringsAsFactors=FALSE)
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
as.factor)
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
colnames(df.responses)[1]   <- "subjects"
df.responses                <- Filter(function(x) !(all(x=="")), df.responses) #delete blank columns
#Split all item specific data from subject specific data
ind_items   <- grep("[VN]A[0-9]",colnames(df.responses),value = TRUE)
df.subjectinfo <- df.responses
df.subjectinfo[,ind_items] <- NULL
df.responses  <- df.responses[,c("subjects",ind_items),with=FALSE]
#reshape items
ind             <- grep("^[VN]A[0-9]*$",colnames(df.responses),value = TRUE)
df.respAttach   <- df.responses[,c("subjects",ind),with=FALSE]
df.respAttach   <- melt(df.respAttach,id="subjects",value.name="response_attachment",variable.name='items')
ind             <- grep("^[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respTime     <- df.responses[,c("subjects",ind),with=FALSE]
df.respTime     <- melt(df.respTime,id="subjects",value.name="rt_attachment",variable.name='items')
ind             <- grep("P[VN]A[0-9]*]$",colnames(df.responses),value = TRUE)
df.respPAttach  <- df.responses[,c("subjects",ind),with=FALSE]
df.respPAttach  <- melt(df.respPAttach,id="subjects",value.name="rating_plausibility",variable.name='items')
ind             <- grep("P[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respPTime    <- df.responses[,c("subjects",ind),with=FALSE]
df.respPTime    <- melt(df.respPTime,id="subjects",value.name="rt_plausibility",variable.name='items')
df.responses    <- cbind(df.respAttach,df.respTime[,3],df.respPAttach[,3],df.respPTime[,3])
df.responses$hits <- as.numeric((grepl("N",df.responses$items) & df.responses$response_attachment == "Nomen") |
(grepl("V",df.responses$items) & df.responses$response_attachment == "Verb"))
df.responses    <- df.responses %>%
mutate(attachment = ifelse(grepl("N",items),"Noun","Verb"))
#############ANALYSIS#################
summary(df.subjectinfo$age)
summary((df.subjectinfo$interviewtime)/60)
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responses.csv",head=TRUE,sep=";", na.strings = c("","NA"),stringsAsFactors=FALSE)
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
colnames(df.responses)[1]   <- "subjects"
df.responses                <- Filter(function(x) !(all(x=="")), df.responses) #delete blank columns
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
df.responses
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responses.csv",head=TRUE,sep=";", na.strings = c("","NA"),stringsAsFactors=FALSE)
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
as.factor)
df.responses
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responses.csv",head=TRUE,sep=",", na.strings = c("","NA"),stringsAsFactors=FALSE)
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
as.factor)
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
colnames(df.responses)[1]   <- "subjects"
df.responses                <- Filter(function(x) !(all(x=="")), df.responses) #delete blank columns
#Split all item specific data from subject specific data
ind_items   <- grep("[VN]A[0-9]",colnames(df.responses),value = TRUE)
df.subjectinfo <- df.responses
df.subjectinfo[,ind_items] <- NULL
df.responses  <- df.responses[,c("subjects",ind_items),with=FALSE]
df.responses
ind             <- grep("^[VN]A[0-9]*$",colnames(df.responses),value = TRUE)
df.respAttach   <- df.responses[,c("subjects",ind),with=FALSE]
df.respAttach   <- melt(df.respAttach,id="subjects",value.name="response_attachment",variable.name='items')
ind             <- grep("^[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respTime     <- df.responses[,c("subjects",ind),with=FALSE]
df.respTime     <- melt(df.respTime,id="subjects",value.name="rt_attachment",variable.name='items')
ind             <- grep("P[VN]A[0-9]*]$",colnames(df.responses),value = TRUE)
df.respPAttach  <- df.responses[,c("subjects",ind),with=FALSE]
df.respPAttach  <- melt(df.respPAttach,id="subjects",value.name="rating_plausibility",variable.name='items')
ind             <- grep("P[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respPTime    <- df.responses[,c("subjects",ind),with=FALSE]
df.respPTime    <- melt(df.respPTime,id="subjects",value.name="rt_plausibility",variable.name='items')
df.responses    <- cbind(df.respAttach,df.respTime[,3],df.respPAttach[,3],df.respPTime[,3])
df.responses$hits <- as.numeric((grepl("N",df.responses$items) & df.responses$response_attachment == "Nomen") |
(grepl("V",df.responses$items) & df.responses$response_attachment == "Verb"))
df.responses    <- df.responses %>%
mutate(attachment = ifelse(grepl("N",items),"Noun","Verb"))
#############ANALYSIS#################
summary(df.subjectinfo$age)
summary((df.subjectinfo$interviewtime)/60)
df.subjectinfo$age
df.subjectinfo %>%
select(subjects,starts_with("correct")) %>%
mutate(number_correct = rowSums(!is.na(.[,2:ncol(.)]))) %>%
select(subjects,number_correct)
subset_unambiguous <- stimuli$fullID[(stimuli$Unambiguous.==1)]
sentences_unambiguous <- stimuli[(stimuli$Unambiguous.==1),4:12]
df.responses %>%
filter(items %in% subset_unambiguous) %>%
group_by(subjects) %>%
summarise(accuracy = mean(hits))
summary_rts <- df.responses %>%
group_by(subjects,attachment,hits) %>%
summarise(mean_rt = mean(rt_attachment))
p <- ggplot(summary_rts, aes(x = factor(hits), y = mean_rt, subject = subjects)) +
geom_boxplot() +
facet_wrap(~attachment) +
geom_jitter(size = 2) +
ggtitle("RTs averaged over items")
p <- ggplotly(p,tooltip = c("subjects","mean_rt"))
p
mean_accuracy <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
mean_accuracy
mean_accuracy <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/18,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
mean_accuracy
items_reject  <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2)) %>%
filter(percent_correct <= unlist(mean_accuracy))
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2))
acc_per_item <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/13,digits=2))
acc_per_item[acc_per_item$items == "VA14"]
acc_per_item[acc_per_item$items == "VA14",]
mean_accuracy
7/18
18/7
1-(7/18)
10/5
5/10
9/18
11/18
df.responses[df.responses$items == "VA14",]
df.responses[df.responses$items == "VA14",] %>%
group_by(items %>%)
df.responses[df.responses$items == "VA14",] %>%
group_by(items) %>%
summarise(x=round(sum(hits)/18,digits=2))
acc_per_item <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/18,digits=2))
acc_per_item[acc_per_item$items == "VA14",]
11/18
mean_accuracy <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/18,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
acc_per_item <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/18,digits=2))
items_reject  <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/18,digits=2)) %>%
filter(percent_correct <= unlist(mean_accuracy))
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
acc_per_item
dim(responses)
responses
dim(responses)
length(responses)
length(responses)-1
subjectnum      <- length(responses)-1
mean_accuracy <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/subjectnum,digits=2)) %>%
summarise(mean_correct = mean(percent_correct))
acc_per_item <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/subjectnum,digits=2))
items_reject  <- df.responses %>%
group_by(items) %>%
summarise(percent_correct = round(sum(hits)/subjectnum,digits=2)) %>%
filter(percent_correct <= unlist(mean_accuracy))
stimuli[(stimuli$fullID %in% items_reject$items),c(4:12,15)]
acc_per_item[acc_per_item$items == "NA11"]
acc_per_item[acc_per_item$items == "NA11",]
acc_per_item[acc_per_item$items == "VA11",]
15/18
mean_accuracy
17/18
df.responses %>%
group_by(subjects,attachment,hits) %>%
summarise(mean_rt = mean(rt_attachment))
df.responses %>%
group_by(subjects,attachment) %>%
summarise(mean_rt = mean(rt_attachment))
df.responses %>%
group_by(subjects,items) %>%
summarise(mean_rt = mean(rt_attachment))
df.responses %>%
group_by(items,subjects) %>%
summarise(mean_rt = mean(rt_attachment))
df.responses %>%
group_by(items)
acc_per_item[acc_per_item$items == "NA110",]
library(plotly)
library(reshape)
library(RColorBrewer)
library(data.table)
library(dplyr)
#Create color scheme
pastel_colors = brewer.pal(8, "Pastel1")
set_colors = brewer.pal(8, "Set1")
#load stimulus file
stimuli         <- read.csv(file="stimuliA.csv",head=TRUE,sep=",",na.strings = c("","NAN"), stringsAsFactors = FALSE)
stimuli$fullID  <- as.character(interaction(stimuli[,c(13,3)],sep = ""))
#load response file
responses       <- read.csv(file="all_responsesB.csv",head=TRUE,sep=",", na.strings = c("","NA"),stringsAsFactors=FALSE)
subjectnum      <- length(responses)-1
#transpose and fix column names and classes
names                       <- responses$surveynum
df.responses                <- as.data.frame(t(responses[,-1]))
colnames(df.responses)      <- names
df.responses$age            <- as.numeric(df.responses$age)
subset_time                 <- grep("ime$",names(df.responses),value = TRUE)
df.responses[,subset_time]  <- lapply(df.responses[,subset_time], function(x) as.numeric(gsub(",",".",x)))
df.responses[sapply(df.responses, is.character)] <- lapply(df.responses[sapply(df.responses, is.character)],
as.factor)
df.responses                <- setDT(df.responses,keep.rownames = TRUE)
colnames(df.responses)[1]   <- "subjects"
df.responses                <- Filter(function(x) !(all(x=="")), df.responses) #delete blank columns
#Split all item specific data from subject specific data
ind_items   <- grep("[VN]A[0-9]",colnames(df.responses),value = TRUE)
df.subjectinfo <- df.responses
df.subjectinfo[,ind_items] <- NULL
df.responses  <- df.responses[,c("subjects",ind_items),with=FALSE]
#reshape items
ind             <- grep("^[VN]A[0-9]*$",colnames(df.responses),value = TRUE)
df.respAttach   <- df.responses[,c("subjects",ind),with=FALSE]
df.respAttach   <- melt(df.respAttach,id="subjects",value.name="response_attachment",variable.name='items')
ind             <- grep("^[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respTime     <- df.responses[,c("subjects",ind),with=FALSE]
df.respTime     <- melt(df.respTime,id="subjects",value.name="rt_attachment",variable.name='items')
ind             <- grep("P[VN]A[0-9]*]$",colnames(df.responses),value = TRUE)
df.respPAttach  <- df.responses[,c("subjects",ind),with=FALSE]
df.respPAttach  <- melt(df.respPAttach,id="subjects",value.name="rating_plausibility",variable.name='items')
ind             <- grep("P[VN]A[0-9]*Time$",colnames(df.responses),value = TRUE)
df.respPTime    <- df.responses[,c("subjects",ind),with=FALSE]
df.respPTime    <- melt(df.respPTime,id="subjects",value.name="rt_plausibility",variable.name='items')
df.responses    <- cbind(df.respAttach,df.respTime[,3],df.respPAttach[,3],df.respPTime[,3])
df.responses$hits <- as.numeric((grepl("N",df.responses$items) & df.responses$response_attachment == "Nomen") |
(grepl("V",df.responses$items) & df.responses$response_attachment == "Verb"))
df.responses    <- df.responses %>%
mutate(attachment = ifelse(grepl("N",items),"Noun","Verb"))
#############ANALYSIS#################
summary(df.subjectinfo$age)
summary((df.subjectinfo$interviewtime)/60)
df.subjectinfo %>%
select(subjects,starts_with("correct")) %>%
mutate(number_correct = rowSums(!is.na(.[,2:ncol(.)]))) %>%
select(subjects,number_correct)
subset_unambiguous <- stimuli$fullID[(stimuli$Unambiguous.==1)]
sentences_unambiguous <- stimuli[(stimuli$Unambiguous.==1),4:12]
df.responses %>%
filter(items %in% subset_unambiguous) %>%
group_by(subjects) %>%
summarise(accuracy = mean(hits))
subset_unambiguous
summary_rts <- df.responses %>%
group_by(subjects,attachment,hits) %>%
summarise(mean_rt = mean(rt_attachment))
summary_rts
p <- ggplot(summary_rts, aes(x = factor(hits), y = mean_rt, subject = subjects)) +
geom_boxplot() +
facet_wrap(~attachment) +
geom_jitter(size = 2) +
ggtitle("RTs averaged over items")
p <- ggplotly(p,tooltip = c("subjects","mean_rt"))
p
summary_rts
df.responses
